#include <stdio.h>
	 char *cuserid(char *buf);
 	ㄴ getlogin함수의 단점을 보완
		ㄴ getlogin함수와 같이 /var/adamutmp에서 사용자 정보 읽음.
		ㄴ 정보를 찾지 못할 경우 실행 중인 프로세스의 사용자 id를 패스워드 파일에서 로그인명을 읽어 반환함.
 		ㄴ 사용자 로그인명을 읽어 buf에 저장하며 buf 저장공간을 사용할 수 없을 경우 임시 메모리에 로그인명을 저장하고 임시 메모리 영역을 가리키는 포인터를 반환함.

사용자 ID 번호
 ㄴ 시스템 사용자를 나타내는 정수 값(15bit)
	ㄴ Super User: 0
	ㄴ 1~100: 시스템 용도(Red Hat:101~499, Debian: ~999)
 ㄴ 사용자 ID 번호에는 '실제 사용자 ID 번호'와 '유효 사용자 ID 번호'가 있다.
	ㄴ 실제 사용자 ID 번호 : 프로그램을 실행하는 사용자를 가리키며 로그인 정보 기록에 사용
	ㄴ 유효 사용자 ID 번호 : 프로세스의 접근 권한을 결정할 때 사용
	ㄴ 유효 사용자 ID는 일반적으로 실제 사용자 ID와 같지만 set-user-id 비트 등으로 다른 ID로 바꾸어 프로세스에게 추가적인 접근 권한을 줄 수 있음.
 	ㄴ 사용자 ID는 시스템에서 유일하거나 한 명의 사용자만 사용할 수 있으나 같은 사용자 ID 번호를 하나 이상의 로그인명을 사용할 수도 있음.
	ㄴ 여러 사람이 다른 패스워드를 사용하지만 같은 권한으로 로그인할 수 있도록 함.

setuid와 seteuid 실행 시 주의점
	ㄴ setuid 함수를 호출한 프로세스의 유효 사용자 ID가 superuser면 실제, 유효, 저장된 사용자 ID는 uid값으로 설정됨
	ㄴ setuid 함수를 호출한 프로세스의 유효 사용자 ID가 superuser가 아니고 uid가 함수를 호출한 프로세스의 실제 사용자 ID 또는 저장된 사용자 ID와 같으면 유효 사용자 ID uid값으로 설정됨.
	ㄴ seteuid함수를 호출한 프로세스의 유효 사용자 ID가 superuser면 유효 사용자 ID는 euid로 설정됨
	ㄴ seteuid함수를 호출한 프로세스의 유효 사용자 ID가 superuser가 아니고 프로세스의 실제 사용자 ID 또는 저장된 사용자  ID와 euid가 같다면 유효 사용자 ID는 euid값으로 설정

Shadow password 파일
 ㄴ 사용자 암호와 연관된 정보를 저장하는 파일
 ㄴ 암호화된 사용자 암호가 주된 저장 정보임
 ㄴ 유닉스 시스템은 암호를 포함한 모든 사용자 정보를 패스워드 파일(/etc/passwd)파일에 저장하였으나 보안성에 대한 요구 사항이 높아지면서 사용자 정보와 암호를 분리하는 전략이 나타났고 암호와 관련된 사항을 별도로 저장하는 파일을 Shadow password file이라고 지칭함
 	ㄴ /etc/shadow
	ㄴ 패스워드 파일은 누구나 읽을 수 있는 파일로 사용자 아이디와 해시 알고리즘으로 변경된 암호를 볼 수 있어서 유닉스 시스템의 해킹에 악용되었음.
 ㄴ Shadow password file은 관리자인 Super User만 접근할 수 있음
 ㄴ 섀도우 파일은 1980년대 중반에 SunOS에서 처음 나타나기 시작해서 1988년 시스템 V 3.2버전, 1990년 4.3 BSD Rino 버전에서 사용되었음
 ㄴ Shadow password file은 암호 뿐 만 아니라 패스워드 주기 정보를 포함하고 있어 주기적으로 암호를 변경하게 하여 접근권한이 없는 사용자가 사용할 수 없도록 함.
 ㄴ 유닉스 시스템은 Shadow password file을 위해 spwd 구조체를 shadow.h에 정의하고 있음.
	struct spwd{

파일 특수 비트 권한
	ㄴ set-user-id
	-> 파일을 실행 시 프로세스의 권한은 파일을 실행한 사용자의 권한(real user)으로 실행되는 것이 아닌 파일 소유자(effective user)의 권한으로 실행하게 함.(예. mail.passwd 명령 등)
	->04000 권한

	ㄴ set-group-id
	-> set-user-id와 동일하게 동작
	-> 02000 권한

	ㄴ sticky
	-> 디렉토리에만 적용
	-> 일종의 공유 디렉토리로 모든 사용자가 파일을 생성할 수 있지만 자신의 소유 파일만 수정, 삭제 할 수 있음.(예. /tmp 파일)
	->01000 권한









