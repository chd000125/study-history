심볼릭 링크 정보
 ㄴ readlink  함수
	ㄴ unistd.h에 정의
	ㄴ int readlink(const char *path, void *buf, size_t bufsiz);
	-> path에 표시된 심볼릭 링크의 정보를 buf에 저장하고 buf의 크기는 bufsiz에 저장
	-> 함수가 성공하면 buf에 저장된 바이트 수 반환
 ㄴ realpath 함수
	ㄴ stdio.h
	ㄴ char *realpath(const char *filename, char *reslovedname);
	ㄴ 심볼릭 링크파일의 실제 경로를 resolvedname에 저장

파일 존재 접근 권한
 ㄴ 파일의 존재 여부 및 읽기, 쓰기 권한 점검
 ㄴ unistd.h 포함
 ㄴ int access(const char *path, int amode);
	ㄴ amode 값
	-R_OK : 읽기 권한
	-W_OK : 쓰기 권한
	-X_OK : 실행(접근)권한
	-F_OK : 파일 존재 여부
	ㄴ amode는 OR연산을 사용하여 점검할 수 있음.
	ㄴ 접근권한이 있으면 0 반환

파일 속성
 ㄴ 파일의 권한 비트
	ㄴ 읽기
	-> 파일과 디렉토리 내용을 읽을 수 있음
	ㄴ 쓰기
	-> 파일과 디렉토리 내용을 변경
	-> 디렉토리 : 파일 생성, 삭제, 변경의 권한
	ㄴ 실행
	-> 파일
		-> 이진 파일 : 파일의 실행
		-> 쉘 스크립트 : 쉘 명령 수행(읽기, 쓰기 권한도 있어야 함)
	-> 디렉토리: 디렉토리 접근 권한
 
ㄴ 파일 특수 비트 권한
	ㄴ set-user-id
	-> 파일을 실행 시 프로세스의 권한은 파일을 실행한 사용자의 권한(real user)으로 실행되는 것이 아닌 파일 소유자(effective user)의 권한으로 실행하게 함.(예. mail.passwd 명령 등)
	->04000 권한

	ㄴ set-group-id
	-> set-user-id와 동일하게 동작
	-> 02000 권한

	ㄴ sticky
	-> 디렉토리에만 적용
	-> 일종의 공유 디렉토리로 모든 사용자가 파일을 생성할 수 있지만 자신의 소유 파일만 수정, 삭제 할 수 있음.(예. /tmp 파일)
	->01000 권한

파일 속성 변경
 ㄴ 파일 모드 변경
	ㄴ sys/types.h, sys/stat.h 포함
	ㄴ int chmod(const char *path, mode_t mode);
	ㄴ int fchmod(int fd, mode_t mode);
 
 ㄴ 파일의 소유자와 그룹 변경
	ㄴ sys/types.h, unistd.h 포함
	ㄴ int chown(const char *path, uid_t owner, gid_t group);
	ㄴ int lchown(const cahr *path, uid_t owner, gid_t group);
	->심볼릭 링크 포함
	->링크 자체 소유자와 그룹을 변경
	ㄴ int fchown(int fd, uid_t owner, gid_t group);

 ㄴ 파일의 크기 변경
	ㄴ 파일의 크기를 변경
	ㄴ int truncate(const char *path, off_t length);
	ㄴ Path가 가리키는 파일 크기를 length 바이트로 바꿈
	ㄴ int ftruncate(int fd, off_t length);
	ㄴ fd가 가리키는 파일 크기를 length 바이트로 바꿈
	ㄴlength가 파일의 크기보다 크면 length를 초과하는 부분은 버리고 작으면 0으로 채움

 ㄴ 파일의 접근시간과 변경시간 변경
	ㄴ sys/types.h와 utime.h 포함
	ㄴ Int utime(const char *path, const struct utimebuf  *times);
	ㄴ Path에 있는 파일을 times로 지정된 시간으로 변경
	struct utimebuf {
		time_t actime;
		time_t modtime;
	}

파일, 디렉토리 생성과 삭제
 ㄴ 파일 삭제
	#include <unistd.h>
	int unlink(const char *path)
	-> 파일 수행이 성공하면 0을 리턴하고 실패하면 -1을 리턴함
	#include <stdio.h>
	int remove(const char *path)
	-> 파일의 경우 unlink, 디렉토리의 경우 rmdir과 동일한 기능을 함

 ㄴ 디렉토리 생성과 삭제
	#include <sys/types.h>
	#include <sys/stat.h>
	int mkdir(const char *path, mode_t mode)
	-> path에 지정된 디렉토리를 mode에 지정한대로 생성함
	-> 디렉토리가 생성되면 0을 반환하고 실패하면 -1을 반환함
	#include <unistd.h>
	int rmdir(const char *path)
	-> path에 지정된 디렉토리를 지움
	-> 디렉토리는 파일이나 디렉토리가 없어야 함.

 ㄴ 링크 만들기
	#include <unistd.h>
	int link(const char *existing, const char *new)
	-> 하드링크 생성
	#include <unistd.h>
	int symlink(const char *existing, const char *new)
	-> 심볼릭 링크 생성

 ㄴ 파일명과 디렉토리명 변경
	#include <stdio.h>
	int rename(const char *old, const char *new)
	-> old 이름의 파일이나 디렉토리명을 new 이름의 파일이나 디렉토리로 변경함.

디렉토리 관련 함수
 ㄴ 현재 작업 디렉토리 출력
	#include <unistd.h>
	char *getcwd(char *buf, size_t size)
	-> 현재 작업 디렉토리의 절대 경로를 buf에서 가리키는 size크기의 문자열에 저장함.

 ㄴ 현재 작업 디렉토리 변경
	#include <unistd.h>
	int chdir(const char *path)
	int fchdir(int fd)
	-> chdir 함수는 지정된 path로 디렉토리 변경
	-> fchdir 함수는 fd로 지정된 파일 디스크립터로 참조하는 디렉토리로 변경

 ㄴ 디렉토리
	ㄴ 디렉토리 함수에 필요한 구조체
	struct dirent{
		ino_t	d_ino;
		off_t	d_off;
		unsigned short	d_reclen;
		char	d_name;
	};
	-> d_ino: 엔트리의 i-노드 번호
	-> d_off: 디렉토리 파일 안의 레코드 오프셋
	-> d_feclen: 디렉토리 엔트리의 레코드 길이
	-> d_name: 엔트리 명

 ㄴ 디렉토리
	#include <dirent.h>
	DIR *opendir(const char *path);
	-> path에서 가리키는 디렉토리를 읽기 전용으로 열고 DIR *형의 디렉토리 스트림 포인터를 반환함.
	struct dirent *readdir(DIR *dp);
	-> 디렉토리 포인터 dp에서 읽은 디렉토리 엔트리 반환
	long telldir(DIR *dp);
	-> 디렉토리 파일 안의 현재 오프셋 값 반환
	long seekdir(DIR *dp, long pos);
	-> 현재 디렉토리 파일 안의 오프셋 값을 pos로 설정함.
	long rewinddir(DIR *dp);
	-> 현재 디렉토리 엔트리의 오프셋 값을 0으로 설정
	long closedir(DIR *dp);
	-> 현재 사용 중인 디렉토리를 닫음.

시간과 날짜 연산
 ㄴ 시간의 복잡성
	ㄴ 유닉스 시간(Unix time, Epoch time, POSIX time)
	-> 1970년 1월 1일 00:00:00(UTC, 협정세계시)에서 현재까지 경과한 시간을 초 단위로 연산
	-> 시간대, 일광 시간 절약제를 적용

 ㄴ 현재 시간
	ㄴ 현재 시간을 유닉스 시간 형식으로 변경
	#include <sys/types.h>
	#inlcude <time.h>

	time_t time(time_t *tloc)
	-> time_t는 long 형

 ㄴ 지역 시간대
	#include <time.h>
	void tzset(void);
	ㄴ 지역 시간대를 결정하는 외부 변수 설정
	extern time_t timezone, altzone;
	extern char *tzname[2];
	extern int daylight;
	-> timezone : UTC와 지역 표준 시간의 차이를 초로 저장
	-> altzone : UTC와 지역보정시간의 차이를 초로 저장
	-> tzname[0] : 지역표준시 약어
	-> tzname[1] : 지역보정시 약어
	-> daylight : 일광절약제 적용 여부

 ㄴ 유닉스 시간과 실제 시간
	ㄴ 유닉스 시간 -> 실제 시간
	-> 시간을 나타내는 구조체 tm 사용
	struct tm {
		int tm sec; //초 표시 (0~61, 61은 윤초)
		int tm_min; //분 표시(0~59)
		int tm_hour; //시간 표시(0~23)
		int tm_mday; //일 표시(1~31)
		int tm_mon; //월 표시(0~11)
		int tm_year; //년 표시(1900년 이후 표시)
		int tmwday; //요일 표시(0~6)
		int tm_yda; //날짜 표시(0~365)
		int tm_isdst; //일광 절약제 적용 여부
	}

 ㄴ유닉스 시간과 실제 시간
	ㄴ 유닉스 시간 -> 실제 시간
	#include <time.h>
	struct tm *gmtime(const time_t *clock);
	-> 유닉스 시간 clock을 매개변수로 받아 tm 구조체 반환
	#include <time.h>
	struct tm *localtime(const time_t *clock);
	-> gmtime함수와 동일한 형식이나 지역 시간대나 지역 일괄 절약 시간대로 수정
	#include <time.h>
	time_t mktime(struct tm *tp);
	-> tm 구조체를 입력받아 유닉스 시간으로 변경하여 반환
	#include <time.h>
	double difftime(time_t t1, time_t t0);
	-> t0와 t1의 시간 차이를 계산

 ㄴ 날짜 문자열 형식 지정
	ㄴ 유닉스 시간을 tm 구조체로 변경하고 특정 형식으로 변경하여 반환
	#include <time.h>
	char *ctime(const time_t *clock);
	-> DDD MMM dd hh:mm:ss yyyy 형식으로 시간 출력
	-> asctime(localtime(clock))과 동일
	#include <time.h>
	char * asctime(const struct tm *tm);
	-> localtime 이나 gmtime이 반환한 tm의 있는 시간을 26글자 문자열로 변경함
	-> ctime과 동일한 출력 형식을 가짐
	#include <time.h>
	size_t *strftime(const char *s, size_t maxsize, const char *format, const struct tm *tm);
	-> s : 시간을 저장할 배열
	-> maxsize: 배열의 크기
	-> format: 문자열 구성 형식(printf의 출력지시자와 유사)
	#include <time.h>
	int cftime(char *s, const char *format, const time_t *clock);
	int ascftime(char *s, const char *format, const struct tm *tm);
	-> strftime과 동일한 출력

로그인명
 ㄴ 시스템을 사용하는 사용자 신원을 확인하기 위한 사용자 이름
 ㄴ 1~8개의 문자로 구성됨
	ㄴ /usr/include/limits.h의 LOGIN_NAME_MAX 지정
	ㄴ 시스템에 따라 8개 이상의 문자로 구성된 로그인 명 허용(linux:최대 32자)
	ㄴ 시스템에 따라 - 또는 _ 와 같은 특수문자를 허용하기도 함.
 ㄴ 로그인명 파악
	ㄴ #includ<unistd.h>
	      char*getlogin(void);
	ㄴ 프로그램을 사용하는 사용자의 로그인 명을 반환함.
	ㄴ /var/admutmp파일을 읽어 프로그램에 해당되는 내용을 찾고 그 내용에서 로그인명을 읽어 반환함.
	ㄴ 사용자가 로그아웃했거나 터미널 없는 rsh 같은 명령으로 프로그램 실행 시 널 값 반환함.
 ㄴ 로그인명 파악
	#include <stdio.h>
	 char *cuserid(char *buf);

 ㄴ getlogin함수의 단점을 보완
	ㄴ getlogin함수와 같이 /var/adamutmp에서 사용자 정보 읽음.
	ㄴ 정보를 찾지 못할 경우 실행 중인 프로세스의 사용자 id를 패스워드 파일에서 로그인명을 읽어 반환함.
 	ㄴ 사용자 로그인명을 읽어 buf에 저장하며 buf 저장공간을 사용할 수 없을 경우 임시 메모리에 로그인명을 저장하고 임시 메모리 영역을 가리키는 포인터를 반환함.

사용자 ID 번호
 ㄴ 시스템 사용자를 나타내는 정수 값(15bit)
	ㄴ Super User: 0
	ㄴ 1~100: 시스템 용도(Red Hat:101~499, Debian: ~999)
 ㄴ 사용자 ID 번호에는 '실제 사용자 ID 번호'와 '유효 사용자 ID 번호'가 있다.
	ㄴ 실제 사용자 ID 번호 : 프로그램을 실행하는 사용자를 가리키며 로그인 정보 기록에 사용
	ㄴ 유효 사용자 ID 번호 : 프로세스의 접근 권한을 결정할 때 사용
	ㄴ 유효 사용자 ID는 일반적으로 실제 사용자 ID와 같지만 set-user-id 비트 등으로 다른 ID로 바꾸어 프로세스에게 추가적인 접근 권한을 줄 수 있음.
 	ㄴ 사용자 ID는 시스템에서 유일하거나 한 명의 사용자만 사용할 수 있으나 같은 사용자 ID 번호를 하나 이상의 로그인명을 사용할 수도 있음.
	ㄴ 여러 사람이 다른 패스워드를 사용하지만 같은 권한으로 로그인할 수 있도록 함.

실제 사용자 ID와 유효 사용자 ID 확인
	#include <sys/types.h>
	#include <unistd.h>
	uid_t getuid(void);
	uid_t geteuid(void);
실제 사용자 ID와 유효 사용자 ID 설정
	#include <sys/types.h>
	#include <unistd.h>
	int setuid(uid_t uid);
	int seteuid(uid_t euid);
 ㄴ setuid 함수를 호출한 프로세스의 실제 유효 사용자 ID와 저장된 사용자 ID를 uid에 저장된 ID 값으로 설정함.
 ㄴ seteuid 함수는 함수를 호출한 프로세스의 유효 사용자 ID만 euid에 저장된 ID를 설정함.
 ㄴ 함수 실행이 성공하면 0을 반환하고 실패하면 -1을 반환함.

 ㄴ 로그인 시 로그인 프로세스는 실제, 유효, 저장된 사용자 ID를 입력한 사용자 ID를 설정함.
	ㄴ 그러나 일반 프로세스가 프로그램을 실행 시 그 프로세스와 관련된 사용자 ID값이 변경 될 수 있음.
	ㄴ set-user-id 비트 설정에 따라 프로세스의 유효 사용자 ID와 저장된 사용자 ID는 프로그램 파일의 소유자 ID가 설정되어야 함.
 ㄴ setuid와 seteuid 실행 시 주의점
	ㄴ setuid 함수를 호출한 프로세스의 유효 사용자 ID가 superuser면 실제, 유효, 저장된 사용자 ID는 uid값으로 설정됨
	ㄴ setuid 함수를 호출한 프로세스의 유효 사용자 ID가 superuser가 아니고 uid가 함수를 호출한 프로세스의 실제 사용자 ID 또는 저장된 사용자 ID와 같으면 유효 사용자 ID uid값으로 설정됨.
	ㄴ seteuid함수를 호출한 프로세스의 유효 사용자 ID가 superuser면 유효 사용자 ID는 euid로 설정됨
	ㄴ seteuid함수를 호출한 프로세스의 유효 사용자 ID가 superuser가 아니고 프로세스의 실제 사용자 ID 또는 저장된 사용자  ID와 euid가 같다면 유효 사용자 ID는 euid값으로 설정

그룹 ID 번호
 ㄴ 그룹
	ㄴ 동일한 목적을 공유하는 사용자들의 모임
	ㄴ 시스템의 파일이나 시스템 리소스를 공유함.
	ㄴ 각 프로세스와 관련된 실제 그룹번호, 유효 그룹 번호,저장된 그룹 번호가 있음.
	ㄴ 파일 접근 권한에 영향을 줌.
	ㄴ 프로세스 접근 권한을 결정하는 데 사용함.
 ㄴ 그룹 ID 획득 및 설정
	#include <sys/types.h>
	#include <unistd.h>
	gid_t getgid(void);
	gid_t getegid(void);
	int setgid(gid_t gid);
	int setegid(gid_t egid);
 패스워드 파일
 ㄴ 시스템 사용자 로그인 정보와 관련된 내용을 저장하고 있는 파일
	ㄴ etc/passwd
	ㄴ 로그인명, 사용자 ID 번호, 작업 디렉토리, 로그인 쉘 등을 포함한
	ㄴ 구 버전 유닉스에는 암호화된 패스워드도 포함되어 있지만 최신 유닉스 시스템은 패스워드를 별도의 파일로 관리함.
 ㄴ 패스워드 파일의 구성
	ㄴ 로그인 이름
	ㄴ 암호화된 패스워드(미사용)
	ㄴ 사용자 UID
	ㄴ 사용자 GID
	ㄴ 패스워드 주기(미사용)
	ㄴ 사용자의 실제 이름 등 사용자 관련 정보 기술
	ㄴ 사용자 홈 디렉토리
	ㄴ 사용자 사용 쉘

 ㄴ passwd 구조체
	ㄴ 패스워드 파일에서 정보를 추출하기 위한 구조체
	struct passwd{
		char *pw_name; //사용자 로그인 명
		char *pw_passwd; // 암호화된 패스워드
		uid_t *pw_uid; // 사용자 ID 번호
		gid_t *pw_gid; // 사용자 그룹 ID 번호
		char *pw_age; // 패스워드 변경 주기
		char *pw_comment; // 패스워드 파일에 없음
		char *pw_gecos; // 사용자 실명 외 관련 정보
		char *pw_dir; // 홈 디렉토리(절대경로)
		char *pw_shell; // 사용자 로그인 쉘(절대 경로)

	}

 ㄴ passwd 구조체
	ㄴ 패스워드 파일을 읽기 위한 함수
	#include <pwd.h>
	struct passwd *getpwnam(const char *name);
	// 패스워드 파일에서 name 과 같은 사용자 정보를 줄 단위로 읽어 passwd 구조체에 담고 구조체 포인터 반환함.
	struct passwd *getpwuid(uid_t uid);
	// uid와 같은 사용자 ID를 포함한 줄을 찾아 passwd 구조체에 담고 구조체 반환함.
	struct passwd *getpwent(void);
	// 패스워드 파일을 순차적으로 읽어 읽은 정보를 passwd 구조체에 저장하고 반환함.
	void setpwent(void);
	// 패스워드 파일이 열려있지 않다면 파일을 열고 읽기,쓰기 오프셋을 파일의 시작지점으로 설정(like 초기화)
	void endpwent(void);
	// 패스워드 파일을 닫음.
	패스워드 파일명을 filename으로 지정하여 getpwname이나 getpwuid 함수를 사용할 수 있게함.

Shadow password 파일
 ㄴ 사용자 암호와 연관된 정보를 저장하는 파일
 ㄴ 암호화된 사용자 암호가 주된 저장 정보임
 ㄴ 유닉스 시스템은 암호를 포함한 모든 사용자 정보를 패스워드 파일(/etc/passwd)파일에 저장하였으나 보안성에 대한 요구 사항이 높아지면서 사용자 정보와 암호를 분리하는 전략이 나타났고 암호와 관련된 사항을 별도로 저장하는 파일을 Shadow password file이라고 지칭함
 	ㄴ /etc/shadow
	ㄴ 패스워드 파일은 누구나 읽을 수 있는 파일로 사용자 아이디와 해시 알고리즘으로 변경된 암호를 볼 수 있어서 유닉스 시스템의 해킹에 악용되었음.
 ㄴ Shadow password file은 관리자인 Super User만 접근할 수 있음
 ㄴ 섀도우 파일은 1980년대 중반에 SunOS에서 처음 나타나기 시작해서 1988년 시스템 V 3.2버전, 1990년 4.3 BSD Rino 버전에서 사용되었음
 ㄴ Shadow password file은 암호 뿐 만 아니라 패스워드 주기 정보를 포함하고 있어 주기적으로 암호를 변경하게 하여 접근권한이 없는 사용자가 사용할 수 없도록 함.
 ㄴ 유닉스 시스템은 Shadow password file을 위해 spwd 구조체를 shadow.h에 정의하고 있음.
	struct spwd{
		char *sp_namp;
		//사용자 로그인 명
		char *sp_pwdp;
		//3~24개 문자로 구성된 암호화된 사용자 패스워드
		char *sp_lstchg;
		//1970년 ?월 ?일 부터 패스워드를 마지막으로 변경한 날까지의 일 수
		char *sp_min;
		//패스워드 변경 후 이전 패스워드로 바꿀 수 없는 최소한 일 수 
		char *sp_max;
		//현 패스워드가 유효한 최대 일 수
		char *sp_warn;
		// 패스워드가 만료됨을 알려주기 위한 일 수
		char *sp_inact;
		//패스워드가 만료된 후 계정 사용할 수 없는 일 수
		char *sp_expire;
		//계정 사용이 불가능해지는 날짜
		unsigned long sp_flag;
		//현재 사용하지 않으나 향후 추가되는 요소를 위한 임시 필드
		};
	
	ㄴ shadow password 파일 활용 함수
	#include <shadow.h>
	struct spwd *getspnam(const char *name);
	// getspnam(): shadow 파일에서 name과 일치하는 로그인 명을 가진 사용자의 암호정보를 읽어서 spwd 구조체로 반환함.
	struct spwd *fgetspent(FILE *fp);
	//fgetspent(): shadow파일을 대체하는 파일 fp에서 정보를 읽어  spwd 구조체로 반환함.
	struct spwd *getspent(void);
	//getspent(): 함수를 호출할 떄 마다 shadow 파일에서 암호정보를 한줄 씩 읽음.
	void setspent(void);
	//setspent(): shadow password파일의 읽기, 쓰기 오프셋을 시작지점으로 설정함.
	void endspent(void);
	//endspent(): 사용한 shadow password 파일을 닫음

 ㄴ 시스템에 등록된 그룹에 대한 정보를 포함함
	ㄴ /etc/group
 ㄴ 그룹 정보를 구조체
	struct group {
	char *gr_name;
	// gr_name: 그룹명
	char *gr_passwd;
	//gr_passwd: 공백이거나 암호화된 패스워드가 들어감 -> 만약 password가 있으면 newgrp명령 시 새 그룹 접근권한을 위해 패스워드 입력 해야함.
	gid_t gr_gid;
	//gr_gid: 그룹 ID 번호
	char **gr_mem;
	// gr_mem: 그룹의 멤버인 로그인명
	};
	
 ㄴ 그룹을 다루기 위한 함수
	#include <grp.h>
	struct group *getgrnam(const char *name);
	//getgrnam(): 그룹 파일을 읽어서 name과 같은 그룹 정보를 읽어 group 구조체 반환함.
	struct group *getgrgid(gid_t gid);
	//getgrgid(): gid와 같은 그룹 ID를 갖는 그룹정보를 읽어 group 구조체 반환함.
	struct group *fgetgrent(FILE *fp);
	//fgetgrent(): /etc/group 파일 대신 fp에 지정한 파일에서 한줄 씩 그룹정보를 읽어 반환
	struct group  *getgrent(void);
	//getgrent(): /etc/group 파일에서 그룹정보를 한줄 씩 그룹정보를 읽어 반환함
	void setgrent(void);
	//setgrent(): 그룹 파일을 열고 읽기, 쓰기 오프셋을 파일의 시작 지점으로 설정함.
	void endgrent(void);
	//endgrent(): 사용한 그룹 파일을 닫음.

 ㄴ utmp(utmpx)와 wtmp(wtmpx)파일
	ㄴ /var/adm에 위치
	ㄴ who, finger, login과 같은 명령어를 위한 사용자 정보와 로그인 기록
	ㄴ utmp(utmpx)
	-> 시스템의 현재 상태 정보 기록
	-> 로그인한 사용자 정보 기록
	ㄴ wtmp(wtmpx)
	-> utmp와 동일한 형식
	-> 히스토리 정보 포함
	struct utmp{
	char ut_user[8];
	// ut_user: 사용자 로그인명
	char ut_id[4];
	// ut_id: init 프로그램에서파생되는 프로세스(/etc/inittab id)
	char ut_line[12];
	// ut_line: 사용자가 로그인한 장치명		
	short ut_pid;
	// ut_pid: 현재 실행 중인 프로세스 ID
	short ut_type;
	// ut_type: 항목의 타입
	struct exit_status ut_exit;
	//ut_exit: DEAD_PROCESS의 프로세스 종료상태와 리턴코드
	time_t ut_time;
	// ut_time: 항목이 마지막으로 변경된 시간
	}
	ㄴ ut_type
	-> EMPTY: 빈레코드
	-> RUN_LVL: 변경된 시스템의 실행 레벨
	-> BOOT_TIME: 시스템 부팅
	-> OLD_TIME: 시스템 시간 변경(변경 전 시간)
	-> NEW_TIME: 시스템 시간 변경(변경 후 시간)
	-> INIT_PROCESS: 	init에서 생기는 프로세스
	-> LOGIN_PROCESS: 사용자가 로그인할 때 까지 기다리는 프로세스
	-> USER_PROCESS: 사용자 로그인 세션
	-> DEAD_PROCESS: 종료한 프로세스
	-> ACCOUNTING: 로그인 기록 정보

	struct utmpx {
	char ut_user[32];
	char ut_id[4];
	char ut_line[32];
	pid_t ut_pid;
	short ut_type;
	struct exit_status ut_exit;
	struct timeval ut_tv;
	long ut_session;
	long pad[5];
	short ut_syslen;
	char ut_host[257];
	}
	#include<utmpx.h>
	struct utmpx *getutent(void);
	struct utmpx *getutxid(const struct utmpx *id);
	struct utmpx *getutxline(const struct utmpx *utmpx);
	void setutxent(void);
	void endutxent(void);
	int utmpxname(const char *filename);




